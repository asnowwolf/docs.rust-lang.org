{"question": "What are methods in Rust?", "answer": "Methods are similar to functions, declared with the `fn` keyword and a name, they can have parameters and a return value, and they contain code that is run when called. However, methods are defined within the context of a struct (or an enum or a trait object), and their first parameter is always `self`, representing the instance of the struct the method is being called on."}
{"question": "How do you define a method on a struct?", "answer": "You start an `impl` (implementation) block for the struct, then define the method within the curly brackets. The first parameter of the method is always `self`."}
{"question": "What is method syntax?", "answer": "Method syntax is used to call a method on an instance of a struct. It involves adding a dot followed by the method name, parentheses, and any arguments after the instance."}
{"question": "What does `&self` mean in a method signature?", "answer": "It means the method takes an immutable borrow of the struct instance (`self`) as a parameter. This allows the method to read the data in the struct without taking ownership."}
{"question": "What is the main benefit of using methods instead of functions?", "answer": "Methods provide better organization by grouping all the functionality related to a struct in one `impl` block, making it easier for users to find and understand the capabilities of the struct."}
{"question": "How does Rust handle method calls with automatic referencing and dereferencing?", "answer": "Rust automatically adds `&`, `&mut`, or `*` to the object being called on to match the method signature, making borrowing implicit for method receivers."}
{"question": "How do you define a method that takes multiple parameters?", "answer": "You add the additional parameters to the method signature after the `self` parameter, just like in functions."}
{"question": "What are associated functions?", "answer": "Associated functions are functions defined within `impl` blocks that don't take `self` as a parameter. They are associated with the struct but are not methods because they don't operate on an instance of the struct."}
{"question": "What is a common use case for associated functions?", "answer": "Associated functions are often used for constructors that return a new instance of the struct."}
{"question": "How do you call an associated function?", "answer": "You use the `::` syntax with the struct name, for example: `let sq = Rectangle::square(3);`."}
{"question": "Can a struct have multiple `impl` blocks?", "answer": "Yes, each struct can have multiple `impl` blocks. This is useful for organizing methods and associated functions related to different aspects of the struct."}