{"question": "What is a Cargo workspace?", "answer": "A workspace is a set of packages that share the same Cargo.lock and output directory."}
{"question": "Why might you want to use a Cargo workspace?", "answer": "As your project develops, you might find that the library crate continues to get bigger and you want to split up your package further into multiple library crates. Workspaces can help manage multiple related packages that are developed in tandem."}
{"question": "How do you create a Cargo workspace?", "answer": "Create a directory for the workspace and create a Cargo.toml file with a [workspace] section that specifies the paths to the crates in the workspace."}
{"question": "What is the purpose of the [workspace] section in Cargo.toml?", "answer": "The [workspace] section allows you to add members to the workspace by specifying the path to each crate."}
{"question": "How do you create a new crate within a workspace?", "answer": "Use the `cargo new` command within the workspace directory to create a new crate."}
{"question": "Where are the compiled artifacts for a workspace placed?", "answer": "All compiled artifacts are placed in a single target directory at the top level of the workspace."}
{"question": "Why do all crates in a workspace share the same target directory?", "answer": "Sharing a target directory avoids unnecessary rebuilding of crates because they can access each other's compiled artifacts."}
{"question": "How do you specify a dependency on another crate within a workspace?", "answer": "Add a path dependency to the Cargo.toml file of the dependent crate, specifying the path to the dependent crate relative to the current crate."}
{"question": "How do you run a specific crate within a workspace?", "answer": "Use the `cargo run -p` command, specifying the name of the crate you want to run."}
{"question": "How does Cargo handle dependencies on external crates within a workspace?", "answer": "Cargo resolves all dependencies to a single version and records them in the workspace's Cargo.lock file, ensuring all crates in the workspace use the same version of each dependency."}
{"question": "How do you add a test to a crate within a workspace?", "answer": "Create a test module within the crate's source file and use the `#[cfg(test)]` attribute to mark the test code."}
{"question": "How do you run tests for a specific crate within a workspace?", "answer": "Use the `cargo test -p` command, specifying the name of the crate you want to test."}
{"question": "How do you publish crates from a workspace to crates.io?", "answer": "You must publish each crate in the workspace separately using the `cargo publish` command from the crate's directory."}
{"question": "What are some benefits of using a Cargo workspace?", "answer": "Workspaces make it easier to understand smaller, individual components than one big blob of code. They also make coordination between crates easier if they are often changed at the same time."}