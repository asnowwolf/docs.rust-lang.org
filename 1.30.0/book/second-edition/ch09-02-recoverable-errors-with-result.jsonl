{"question": "What is the purpose of the `Result` enum?", "answer": "The `Result` enum is used to represent the outcome of an operation that might fail, with two variants: `Ok` for success and `Err` for failure."}
{"question": "What are the generic type parameters `T` and `E` in the `Result` enum?", "answer": "`T` represents the type of the successful value returned in the `Ok` variant, while `E` represents the type of the error value returned in the `Err` variant."}
{"question": "How can I determine the return type of a function?", "answer": "You can either consult the standard library API documentation or ask the compiler by providing a type annotation that is incorrect and observing the error message."}
{"question": "What is the return type of the `File::open` function?", "answer": "It returns a `Result<std::fs::File, std::io::Error>`, where `std::fs::File` is the type of the file handle in the `Ok` variant and `std::io::Error` is the type of the error in the `Err` variant."}
{"question": "How can I handle the `Result` value returned by `File::open` using a `match` expression?", "answer": "You can use a `match` expression with two arms: one for the `Ok` variant, which returns the inner `file` value, and another for the `Err` variant, which handles the error."}
{"question": "What is a match guard?", "answer": "A match guard is an extra condition on a `match` arm that further refines the pattern. It must be true for the arm's code to be executed."}
{"question": "How can I handle different kinds of errors in different ways using a `match` expression?", "answer": "You can use a match guard to check the `kind` of the `io::Error` returned in the `Err` variant and handle specific error types differently."}
{"question": "What is the purpose of the `unwrap` method on the `Result` type?", "answer": "The `unwrap` method returns the value inside the `Ok` variant if the `Result` is successful, and panics with an error message if the `Result` is an `Err`."}
{"question": "What is the purpose of the `expect` method on the `Result` type?", "answer": "The `expect` method is similar to `unwrap`, but it allows you to specify a custom panic message."}
{"question": "What does it mean to propagate an error?", "answer": "Propagating an error means returning the error to the calling code instead of handling it within the current function, allowing the calling code to decide how to handle the error."}
{"question": "How can I propagate errors using a `match` expression?", "answer": "You can use a `match` expression with an `Err` arm that returns the error value early from the function using the `return` keyword."}
{"question": "What is the purpose of the `?` operator?", "answer": "The `?` operator provides a shortcut for propagating errors in functions that return `Result`. It automatically returns the value inside the `Ok` variant or returns the error value early from the function."}
{"question": "How does the `?` operator handle error types?", "answer": "The `?` operator uses the `from` function defined in the `From` trait to convert errors from one type to another, ensuring compatibility with the function's return type."}
{"question": "What is the limitation of using the `?` operator?", "answer": "The `?` operator can only be used in functions that have a return type of `Result` or another type that implements the `std::ops::Try` trait."}