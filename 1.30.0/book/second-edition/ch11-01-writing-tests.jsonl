{"question": "What are the three actions typically performed in a Rust test function?", "answer": "1. Set up any needed data or state. 2. Run the code you want to test. 3. Assert the results are what you expect."}
{"question": "What attribute is used to mark a function as a test function?", "answer": "The `#[test]` attribute."}
{"question": "What command is used to run all tests in a Rust project?", "answer": "The `cargo test` command."}
{"question": "What is the purpose of the `tests` module generated by `cargo new`?", "answer": "It provides a template test function to help you get started writing tests."}
{"question": "What macro is used to assert that a condition evaluates to `true`?", "answer": "The `assert!` macro."}
{"question": "What happens if the argument to the `assert!` macro evaluates to `false`?", "answer": "The `assert!` macro calls the `panic!` macro, causing the test to fail."}
{"question": "What is the purpose of the `use super::*;` line in a test module?", "answer": "It brings the code under test in the outer module into the scope of the inner test module."}
{"question": "What macros are provided by the standard library for testing equality and inequality?", "answer": "The `assert_eq!` and `assert_ne!` macros."}
{"question": "What happens when the `assert_eq!` or `assert_ne!` macros fail?", "answer": "They print the two values being compared using debug formatting."}
{"question": "How can you add a custom failure message to the `assert!`, `assert_eq!`, and `assert_ne!` macros?", "answer": "By providing optional arguments after the required arguments, which are passed to the `format!` macro."}
{"question": "What attribute is used to make a test pass if the code inside the function panics?", "answer": "The `#[should_panic]` attribute."}
{"question": "What happens if the code inside a function annotated with `#[should_panic]` does not panic?", "answer": "The test fails."}
{"question": "How can you make `should_panic` tests more precise?", "answer": "By adding an optional `expected` parameter to the `should_panic` attribute, which specifies a substring of the expected panic message."}