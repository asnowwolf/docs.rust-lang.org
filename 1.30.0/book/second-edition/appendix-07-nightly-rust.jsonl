{"question": "What is the purpose of this appendix?", "answer": "This appendix explains how Rust is made and how that affects Rust developers."}
{"question": "What is the stable version of Rust used to generate the output in this book?", "answer": "The output in this book was generated by stable Rust 1.21.0."}
{"question": "What is the guiding principle of Rust's development model?", "answer": "The guiding principle is \"stability without stagnation\", meaning that upgrading to a new version of stable Rust should be painless and bring new features, fewer bugs, and faster compile times."}
{"question": "What are the three release channels for Rust?", "answer": "The three release channels are Nightly, Beta, and Stable."}
{"question": "What is the primary release channel used by most Rust developers?", "answer": "Most Rust developers primarily use the Stable channel."}
{"question": "What is the purpose of the Nightly release channel?", "answer": "Nightly releases allow developers to try out experimental new features."}
{"question": "What is the purpose of the Beta release channel?", "answer": "Beta releases allow developers to test against new features and help Rust discover possible regressions."}
{"question": "How often are Nightly releases produced?", "answer": "Nightly releases are produced every night."}
{"question": "How often are Beta releases produced?", "answer": "Beta releases are produced every six weeks."}
{"question": "How often are Stable releases produced?", "answer": "Stable releases are produced every six weeks."}
{"question": "What is the process for creating a Stable release?", "answer": "A Stable release is created by branching off from the Beta branch."}
{"question": "What is the purpose of the \"train model\" for Rust releases?", "answer": "The train model ensures that new features are tested in the Beta channel before they are released as Stable."}
{"question": "What is the purpose of feature flags in Rust?", "answer": "Feature flags determine what features are enabled in a given release."}
{"question": "How can developers use unstable features in Rust?", "answer": "Developers can use unstable features by using a Nightly release of Rust and annotating their source code with the appropriate flag."}
{"question": "What is the purpose of Rustup?", "answer": "Rustup makes it easy to change between different release channels of Rust."}
{"question": "How can you install Nightly Rust using Rustup?", "answer": "You can install Nightly Rust using the command `rustup install nightly`."}
{"question": "How can you see all of the toolchains you have installed with Rustup?", "answer": "You can see all of the toolchains you have installed with Rustup using the command `rustup toolchain list`."}
{"question": "How can you set a specific toolchain as the default for a particular project?", "answer": "You can set a specific toolchain as the default for a particular project using the command `rustup override add <toolchain>` in the project's directory."}
{"question": "What is the purpose of the RFC process in Rust?", "answer": "The RFC process allows developers to propose new features for Rust."}
{"question": "Who can write RFCs for Rust?", "answer": "Anyone can write RFCs for Rust."}
{"question": "What is the role of the Rust team in the RFC process?", "answer": "The Rust team reviews and discusses RFCs and decides whether to accept or reject them."}
{"question": "What happens to an accepted RFC?", "answer": "An accepted RFC is implemented and added to the `master` branch behind a feature gate."}
{"question": "How are unstable features made stable in Rust?", "answer": "Unstable features are made stable by removing the feature gate and releasing them in a new Stable release."}