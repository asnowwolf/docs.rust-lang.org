{"question": "What is an enum and why is it useful?", "answer": "An enum (short for enumeration) is a data type that allows you to define a set of named constants. It's useful when you need to represent a value that can only be one of a fixed set of possibilities. For example, an IP address can be either version 4 or version 6, but not both at the same time. Enums are appropriate for this because they can only be one of their variants."}
{"question": "How do you define an enum in Rust?", "answer": "You define an enum using the `enum` keyword followed by the name of the enum and a set of curly braces containing the variants. For example, to define an enum called `IpAddrKind` with variants `V4` and `V6`, you would write:\n\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n```"}
{"question": "How do you create instances of enum variants?", "answer": "You create instances of enum variants by using the enum name followed by a double colon and the variant name. For example, to create an instance of the `V4` variant of the `IpAddrKind` enum, you would write:\n\n```rust\nlet four = IpAddrKind::V4;\n```"}
{"question": "What is the advantage of using an enum over a struct to store data?", "answer": "Enums allow you to associate data directly with each variant, eliminating the need for a separate struct. This makes the code more concise and easier to read. Additionally, each variant can have different types and amounts of associated data, which is not possible with structs."}
{"question": "What is the `Option<T>` enum and why is it useful?", "answer": "The `Option<T>` enum is a standard library enum that represents a value that may or may not be present. It has two variants: `Some(T)`, which indicates that a value is present, and `None`, which indicates that no value is present. It's useful for preventing null pointer errors, which are common in other programming languages."}
{"question": "What is the difference between `Option<T>` and null?", "answer": "Rust does not have null values. Instead, it uses the `Option<T>` enum to represent the concept of a value being present or absent. This is more type-safe than null because the compiler will ensure that you handle the case where a value is not present before you try to use it."}
{"question": "How do you handle the different variants of an enum in your code?", "answer": "You can use the `match` expression to handle the different variants of an enum. The `match` expression will run different code depending on which variant of the enum it has, and that code can use the data inside the matching value."}