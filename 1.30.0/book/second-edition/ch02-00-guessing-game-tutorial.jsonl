{"question": "What is the purpose of this chapter?", "answer": "This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program."}
{"question": "What is the classic beginner programming problem that this chapter will implement?", "answer": "A guessing game."}
{"question": "How does the guessing game work?", "answer": "The program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit."}
{"question": "How do I set up a new project for the guessing game?", "answer": "Go to the *projects* directory that you created in Chapter 1 and make a new project using Cargo, like so:\n\n```text\n$ cargo new guessing_game --bin\n$ cd guessing_game\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`) as the first argument. The `--bin` flag tells Cargo to make a binary project, like the one in Chapter 1. The second command changes to the new project’s directory."}
{"question": "What is the purpose of the *Cargo.toml* file?", "answer": "The *Cargo.toml* file contains metadata about the project, including the name, version, authors, and dependencies."}
{"question": "What is the purpose of the *src/main.rs* file?", "answer": "The *src/main.rs* file contains the source code for the project."}
{"question": "How do I compile and run the “Hello, world!” program generated by `cargo new`?", "answer": "Use the `cargo run` command."}
{"question": "What is the purpose of the `use std::io;` line?", "answer": "This line brings the `io` (input/output) library into scope, which provides functionality for accepting user input."}
{"question": "What is the purpose of the `fn main() { ... }` block?", "answer": "This block defines the `main` function, which is the entry point into the program."}
{"question": "What is the purpose of the `println!` macro?", "answer": "The `println!` macro prints a string to the screen."}
{"question": "What is the purpose of the `let mut guess = String::new();` line?", "answer": "This line creates a mutable variable named `guess` and binds it to a new, empty instance of a `String`."}
{"question": "What is the purpose of the `io::stdin().read_line(&mut guess)` line?", "answer": "This line calls the `read_line` method on the standard input handle to get input from the user and place it into the `guess` string."}
{"question": "What is the purpose of the `.expect(\"Failed to read line\");` line?", "answer": "This line calls the `expect` method on the `Result` type returned by `read_line`. If the operation was successful, `expect` will return the value inside the `Ok` variant. If the operation failed, `expect` will cause the program to crash and display the message passed as an argument."}
{"question": "What is the purpose of the `println!(\"You guessed: {}\", guess);` line?", "answer": "This line prints the string saved in the `guess` variable."}
{"question": "How do I generate a random number in Rust?", "answer": "Use the `rand` crate, which provides random number generation functionality."}
{"question": "How do I add the `rand` crate as a dependency to my project?", "answer": "Add the following line to the *Cargo.toml* file:\n\n```toml\n[dependencies]\n\nrand = \"0.3.14\"\n```"}
{"question": "What is the purpose of the `extern crate rand;` line?", "answer": "This line lets Rust know that you will be using the `rand` crate as an external dependency."}
{"question": "What is the purpose of the `use rand::Rng;` line?", "answer": "This line brings the `Rng` trait into scope, which defines methods that random number generators implement."}
{"question": "What is the purpose of the `rand::thread_rng().gen_range(1, 101);` line?", "answer": "This line generates a random number between 1 and 100 using the `thread_rng` function and the `gen_range` method."}
{"question": "What is the purpose of the `use std::cmp::Ordering;` line?", "answer": "This line brings the `Ordering` enum into scope, which represents the possible outcomes of comparing two values."}
{"question": "What is the purpose of the `match guess.cmp(&secret_number) { ... }` block?", "answer": "This block uses a `match` expression to compare the user's guess to the secret number and print an appropriate message based on the result."}
{"question": "What is the purpose of the `let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");` line?", "answer": "This line converts the user's input from a `String` to a `u32` using the `parse` method. If the conversion fails, the program will crash and display the message passed to `expect`."}
{"question": "What is the purpose of the `loop { ... }` block?", "answer": "This block creates an infinite loop that allows the user to make multiple guesses."}
{"question": "How do I make the program exit the loop when the user guesses the correct number?", "answer": "Add a `break;` statement inside the `match` expression's `Ordering::Equal` arm."}
{"question": "How do I make the program ignore non-number input instead of crashing?", "answer": "Use a `match` expression to handle the `Result` type returned by `parse`. If the conversion is successful, return the number. If the conversion fails, use `continue` to skip to the next iteration of the loop."}
{"question": "What is the final step in completing the guessing game?", "answer": "Delete the `println!` statement that prints the secret number."}
{"question": "What are some of the Rust concepts introduced in this chapter?", "answer": "This chapter introduced `let`, `match`, methods, associated functions, external crates, and more."}
