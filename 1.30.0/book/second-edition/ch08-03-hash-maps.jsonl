{"question": "What is a hash map?", "answer": "A hash map, represented by the type `HashMap<K, V>`, stores a mapping of keys of type `K` to values of type `V` using a hashing function to determine how to place them in memory."}
{"question": "What are some other names for hash maps in other programming languages?", "answer": "Hash maps are often called hash, map, object, hash table, or associative array in other programming languages."}
{"question": "When are hash maps useful?", "answer": "Hash maps are useful when you want to look up data by a key of any type, rather than by an index like with vectors."}
{"question": "How can you create an empty hash map?", "answer": "You can create an empty hash map using the `new` method on the `HashMap` type."}
{"question": "How do you add elements to a hash map?", "answer": "You can add elements to a hash map using the `insert` method, which takes a key and a value as arguments."}
{"question": "What is the difference between hash maps and vectors in terms of ownership?", "answer": "Both hash maps and vectors store their data on the heap. For types that implement the `Copy` trait, values are copied into the hash map. For owned values like `String`, the values are moved and the hash map becomes the owner."}
{"question": "How can you create a hash map from a vector of tuples?", "answer": "You can create a hash map from a vector of tuples using the `collect` method on the vector. Each tuple should consist of a key and its value."}
{"question": "What is the purpose of the `get` method in a hash map?", "answer": "The `get` method allows you to retrieve the value associated with a specific key in the hash map. It returns an `Option<&V>`, where `Some` contains the value if it exists, and `None` if the key is not found."}
{"question": "How can you iterate over the key/value pairs in a hash map?", "answer": "You can iterate over the key/value pairs in a hash map using a `for` loop, similar to iterating over vectors."}
{"question": "What happens when you insert a key with a new value into a hash map if the key already exists?", "answer": "The existing value associated with the key will be overwritten with the new value."}
{"question": "How can you insert a value into a hash map only if the key doesn't already have a value?", "answer": "You can use the `entry` method, which returns an `Entry` enum. The `or_insert` method on `Entry` will insert the provided value if the key doesn't exist and return a mutable reference to the value."}
{"question": "How can you update a value in a hash map based on its old value?", "answer": "The `or_insert` method returns a mutable reference to the value for the key. You can then modify the value using the dereference operator (`*`)."}
{"question": "What is a hasher?", "answer": "A hasher is a type that implements the `BuildHasher` trait. It determines how keys are hashed and stored in the hash map."}
{"question": "What is the default hasher used by `HashMap`?", "answer": "By default, `HashMap` uses a cryptographically secure hashing function that provides resistance to DoS attacks."}
{"question": "How can you change the hasher used by `HashMap`?", "answer": "You can specify a different hasher by providing a custom implementation of the `BuildHasher` trait."}