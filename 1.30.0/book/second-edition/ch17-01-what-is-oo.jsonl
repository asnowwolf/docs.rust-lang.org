{"question": "What are the common characteristics of object-oriented programming languages?", "answer": "Common characteristics of OOP languages include objects, encapsulation, and inheritance."}
{"question": "What is the definition of an object in object-oriented programming?", "answer": "An object packages both data and the procedures that operate on that data. The procedures are typically called methods or operations."}
{"question": "How does Rust support the concept of objects?", "answer": "Rust supports objects through structs and enums, which hold data, and `impl` blocks, which provide methods on structs and enums."}
{"question": "What is encapsulation in object-oriented programming?", "answer": "Encapsulation means that the implementation details of an object are not accessible to code using that object. The only way to interact with an object is through its public API."}
{"question": "How does Rust achieve encapsulation?", "answer": "Rust uses the `pub` keyword to control which modules, types, functions, and methods are public, and everything else is private by default."}
{"question": "What is the purpose of the `AveragedCollection` struct in the example?", "answer": "The `AveragedCollection` struct maintains a list of integers and the average of the items in the collection."}
{"question": "Why are the `list` and `average` fields of the `AveragedCollection` struct private?", "answer": "The fields are private to ensure that the average is updated whenever a value is added or removed from the list."}
{"question": "What are the public methods of the `AveragedCollection` struct?", "answer": "The public methods are `add`, `remove`, and `average`."}
{"question": "What is the purpose of the `update_average` method in the `AveragedCollection` struct?", "answer": "The `update_average` method updates the `average` field whenever the `list` is modified."}
{"question": "How does encapsulation in Rust allow for flexibility in code changes?", "answer": "Encapsulation allows for changes to the internal implementation of a struct without affecting external code that uses it, as long as the public API remains the same."}
{"question": "What is inheritance in object-oriented programming?", "answer": "Inheritance is a mechanism where an object can inherit from another object's definition, gaining the parent object's data and behavior without having to define them again."}
{"question": "Does Rust support inheritance?", "answer": "No, Rust does not support inheritance in the traditional sense."}
{"question": "What are the two main reasons for using inheritance?", "answer": "Inheritance is used for code reuse and to enable a child type to be used in the same places as the parent type (polymorphism)."}
{"question": "How does Rust achieve code reuse without inheritance?", "answer": "Rust uses default trait method implementations, similar to a parent class having a method implementation that is inherited by child classes."}
{"question": "How does Rust achieve polymorphism without inheritance?", "answer": "Rust uses generics and trait bounds, which is sometimes called bounded parametric polymorphism."}
{"question": "What are the disadvantages of inheritance?", "answer": "Inheritance can lead to sharing more code than necessary, making a program's design less flexible. It can also introduce the possibility of calling methods on subclasses that don't make sense or cause errors."}
{"question": "What is the alternative to inheritance in Rust?", "answer": "Rust uses trait objects instead of inheritance to achieve polymorphism."}